#!/usr/bin/env python
# -*- coding: utf-8 -*-

import shelve
import sys
import ConfigParser, psycopg2 as sql
from datetime import datetime
from xmlrpclib import ServerProxy, Error

def shouldExit():
    global code
    try:
        code = raw_input('Barcode: ')
    except EOFError:
        return True
    return code.lower() in quit_list

# get RPC key
try:
    config = ConfigParser.SafeConfigParser()
    config.read('rpc.ini')
    rpc_key = config.get('rpc_key', 'key')
except ConfigParser.NoSectionError:
    print 'Need a config file!\n'
    print 'The file should have the following structure:'
    print '[rpc_key]\nkey=INVALID_KEY'
    print '\nINVALID_KEY should be your account RPC key generated by http://www.upcdatabase.com'
    sys.exit(-1)

if rpc_key == 'INVALID_KEY':
    print 'Bad data in config file!\n'
    print 'The file should have the following structure:'
    print '[rpc_key]\nkey=INVALID_KEY'
    print '\nINVALID_KEY should be your account RPC key generated by http://www.upcdatabase.com'
    sys.exit(-2)

# get database stuff set up
config = ConfigParser.SafeConfigParser()
config.readfp(open('skewer.ini'))

user = config.get('database','user')
password = config.get('database','password')
server = config.get('database','server')
port = config.get('database','port')
database = config.get('database','database')
inventory_table = config.get('database','inventory_table')

db = sql.connect(database=database, user=user, password=password, host=server, port=port)
cur = db.cursor()

# set up loop condition
quit_list = ('exit','quit','bye')

s = ServerProxy('http://www.upcdatabase.com/xmlrpc')

d = shelve.open('UPC_cache', writeback=True)

exit_loop = shouldExit()
action = 'out'

while not exit_loop:

    timestamp = datetime.utcnow()
    timestamp.replace(microsecond = 0)
    data = {}
    lookup = True

    if code.upper() == 'CHECK IN':
        print 'Checking in the items to follow!'
        action = 'in'
        exit_loop = shouldExit()
        continue
    elif code.upper() == 'CHECK OUT':
        print 'Checking out the items to follow!'
        action = 'out'
        exit_loop = shouldExit()
        continue
    elif code.upper() == 'LIST ITEMS':
        print 'Listing Items...!'
        cur.execute('select (idx,code,quantity,description,size,type,lastUsed,lastAdded) from ' + inventory_table)
        print'idx\tcode\tquantity\tdescription\tsize\ttype\tlastUsed\tlastAdded\t'
        print '-'*79
        for row in cur:
            print '\t'.join(row[0][1:-1].split(','))
        exit_loop = shouldExit()
        continue
    elif d.has_key(code):
        data = d[code]
        if datetime.strptime(data['noCacheAfterUTC'], "%Y-%m-%dT%H:%M:%S") < timestamp:
            lookup = True
        else:
            # TODO figure out why the cache is being stupid with datetime
            # objects and such...
            #lookup = False
            lookup=True
    
    if lookup:
        data = s.lookup({'rpc_key' : rpc_key, 'upc' : code})

    if data['status'] == 'success':
        if data['found']:
            d[code] = data

            if type(d[code]['noCacheAfterUTC']) is not str:
                d[code]['noCacheAfterUTC'] = d[code]['noCacheAfterUTC'].value
        else:
            print 'Item not found!'
            c = raw_input('Do you want to submit a correction? (y/N) ')
            if c.lower() == 'y':
                description = raw_input('Description: ')
                size = raw_input('Size: ')
                result = s.writeEntry({'rpc_key' : rpc_key, 'upc' : code,
                              'description' : description})
                if result['status'] == 'success':
                    print 'Success!'
                    data['noCacheAfterUTC'] = timestamp.isoformat()
                    data['description'] = description
                    data['size'] = size
                    data['upc'] = code
                    d[code] = data
                else:
                    print result['message']
            else:
                print 'Entering unknown item, please update record offline...'
                data['noCacheAfterUTC'] = timestamp.isoformat()
                data['description'] = 'UNKNOWN ITEM'
                data['size'] = ''
                data['upc'] = code
                d[code] = data

    else:
        print data['message']
        if 'credentials' in data['message'].lower():
            print '\tAre you sure you put your correct RPC key in the config file?'
            d.close()
            sys.exit(-3)
        exit_loop = shouldExit()
        continue

    # database work

    # figure out if the item is in the database yet
    cur.execute('select quantity from ' + inventory_table + ' where code=%s',(data['upc'],))
   
    if cur.rowcount == 0:
        # item was not in database, so put it there
        cur.execute('''insert into ''' + inventory_table + '''
                    (code, description, size, lastAdded, quantity)
                    values (%s, %s, %s, %s, %s)
                    ''',
                    (data['upc'],data['description'],data['size'],timestamp,1))
        print '[%s] Now %d after ADDING %s (%s %s)'%(
            ('Cached','Lookup')[lookup],
            1,data['upc'],
            data['description'], data['size'])
        
    else:
        # item was there, so update the record
        quantity = cur.fetchone()[0]
        if action == 'in':
            cur.execute('''update ''' + inventory_table + '''
                        set quantity=%s, lastAdded=%s
                        where code=%s
                        ''',
                        (quantity + 1,timestamp,data['upc']))
            print '[%s] Now %d after checking IN %s (%s %s)'%(
                ('Cached','Lookup')[lookup],
                quantity + 1,data['upc'],
                data['description'], data['size'])
  
        elif action == 'out':
            if quantity == 0:
                print 'There are already no %s (%s %s) in inventory...'%(data['upc'], data['description'], data['size'])
            else:
                cur.execute('''update ''' + inventory_table + '''
                        set quantity=%s, lastUsed=%s
                        where code=%s
                        ''',
                        (quantity - 1,timestamp,data['upc']))
                print '[%s] Now %d after checking OUT %s (%s %s)'%(
                    ('Cached','Lookup')[lookup],
                    quantity - 1,data['upc'],
                    data['description'], data['size'])

    # end loop
    exit_loop = shouldExit()
    db.commit()

#quit message
print 'Quitting!'
db.commit()
cur.close()
db.close()
d.close()
