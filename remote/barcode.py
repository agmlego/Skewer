#!/usr/bin/env python

import shelve
import sys
import ConfigParser, psycopg2 as sql
from datetime import datetime
from xmlrpclib import ServerProxy, Error

def shouldExit():
    global code
    code = raw_input('Barcode: ')
    return code.lower() in quit_list

# get RPC key
try:
    config = ConfigParser.SafeConfigParser()
    config.read('rpc.ini')
    rpc_key = config.get('rpc_key', 'key')
except ConfigParser.NoSectionError:
    print 'Need a config file!\n'
    print 'The file should have the following structure:'
    print '[rpc_key]\nkey=INVALID_KEY'
    print '\nINVALID_KEY should be your account RPC key generated by http://www.upcdatabase.com'
    sys.exit(-1)

if rpc_key == 'INVALID_KEY':
    print 'Bad data in config file!\n'
    print 'The file should have the following structure:'
    print '[rpc_key]\nkey=INVALID_KEY'
    print '\nINVALID_KEY should be your account RPC key generated by http://www.upcdatabase.com'
    sys.exit(-2)

# get database stuff set up
config = ConfigParser.SafeConfigParser()
config.readfp(open('skewer.ini'))

user = config.get('database','user')
password = config.get('database','password')
server = config.get('database','server')
port = config.get('database','port')
database = config.get('database','database')
inventory_table = config.get('database','inventory_table')

db = sql.connect(database=database, user=user, password=password, host=server, port=port)
cur = db.cursor()

# set up loop condition
quit_list = ('exit','quit','bye')

s = ServerProxy('http://www.upcdatabase.com/xmlrpc')

d = shelve.open('UPC_cache', writeback=True)

exit_loop = shouldExit()

while not exit_loop:

    timestamp = datetime.utcnow()
    data = {}
    lookup = True

    if code == 'Check In':
        print 'Checking in the items to follow!'
        lookup = False
        exit_loop = shouldExit()
        continue
    elif code == 'Check Out':
        print 'Checking out the items to follow!'
        lookup = False
        exit_loop = shouldExit()
        continue
    elif d.has_key(code):
        data = d[code]
        if datetime.strptime(data['noCacheAfterUTC'].value, "%Y-%m-%dT%H:%M:%S") < timestamp:
            lookup = True
            print 'Too old!'
        else:
            lookup = False
            print 'In cache!'
    
    if lookup:
        print 'Looking it up...'
        data = s.lookup({'rpc_key' : rpc_key, 'upc' : code})

    if data['status'] == 'success':
        if data['found']:
            d[code] = data
        else:
            print 'Item not found!'
            c = raw_input('Do you want to submit a correction? (Y/n) ')
            if c.lower() != 'n':
                description = raw_input('Description: ')
                size = raw_input('Size: ')
                result = s.writeEntry({'rpc_key' : rpc_key, 'upc' : code,
                              'description' : description})
                if result['status'] == 'success':
                    print 'Success!'
                    data['noCacheAfterUTC'] = timestamp
                    data['description'] = description
                    data['size'] = size
                    data['upc'] = code
                    d[code] = data
                else:
                    print result['message']
    else:
        print data['message']
        if 'credentials' in data['message'].lower():
            print '\tAre you sure you put your correct RPC key in the config file?'
            d.close()
            sys.exit(-3)
        exit_loop = shouldExit()
        continue

    cur.execute('insert into %s (code, description, size, lastAdded) values (%s %s %s %s)'%inventory_table,(data['upc'],data['description'],data['size'],timestamp,))
    print ('Cached','Lookup')[lookup],data['upc'], data['description'], data['size']
    
    # end loop
    exit_loop = shouldExit()

#quit message
print 'Quitting!'
d.close()
